{"ast":null,"code":"export default class TweetService {\n  //아래에서 base url을 http 이런식으로 가져올 수도 있지만 우리는 constructor에서 baseurl을 외부로부터 가져올 것임\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async getTweets(username) {\n    //전체 내용을 받아올 것인지 특정한 내용만 받아올 것인지 결정해야 해서 선언\n    let query = username ? `?username=${username}` : \"\"; //username이 전달되면 username이라는 쿼리를 만들고 전달되지 않으면 빈 문자열\n    //fetch를 사용해 서버에서 response를 가져옴(그래서 url을 전달해줌)\n\n    const response = await fetch(`${this.baseURL}/tweets${query}`, {\n      //옵션 정의\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }); //받아온 데이터를 json으로 변환\n\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message); //성공하지 않아서 에러 던짐\n    }\n\n    return data; //다 완성된 되었다면(데이터를 다 받았다면) 데이터 return\n  }\n\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/tweets/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        //object를 json형태로 변환\n        text,\n        username: \"bomin\",\n        name: \"Bomin\"\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 201) {\n      throw new Error(data.message); //에러~\n    }\n\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (response.status !== 204) {\n      const data = await response.json();\n      throw new Error(data.message);\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["C:/projects/DWITTER/client/src/service/tweet.js"],"names":["TweetService","constructor","baseURL","getTweets","username","query","response","fetch","method","headers","data","json","status","Error","message","postTweet","text","body","JSON","stringify","name","deleteTweet","tweetId","updateTweet"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAChC;AACAC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEc,QAATC,SAAS,CAACC,QAAD,EAAW;AACxB;AACA,QAAIC,KAAK,GAAGD,QAAQ,GAAI,aAAYA,QAAS,EAAzB,GAA6B,EAAjD,CAFwB,CAE6B;AACrD;;AACA,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,UAASG,KAAM,EAAhC,EAAmC;AAC7D;AACAG,MAAAA,MAAM,EAAE,KAFqD;AAG7DC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAHoD,KAAnC,CAA5B,CAJwB,CASxB;;AACA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN,CAD2B,CACI;AAChC;;AACD,WAAOJ,IAAP,CAdwB,CAcX;AACd;;AAEc,QAATK,SAAS,CAACC,IAAD,EAAO;AACpB,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,UAAjB,EAA4B;AACtDM,MAAAA,MAAM,EAAE,MAD8C;AAEtDC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF6C;AAGtDQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB;AACAH,QAAAA,IAFmB;AAGnBZ,QAAAA,QAAQ,EAAE,OAHS;AAInBgB,QAAAA,IAAI,EAAE;AAJa,OAAf;AAHgD,KAA5B,CAA5B;AAUA,UAAMV,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN,CAD2B,CACI;AAChC;;AACD,WAAOJ,IAAP;AACD;;AAEgB,QAAXW,WAAW,CAACC,OAAD,EAAU;AACzB,UAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,WAAUoB,OAAQ,EAAnC,EAAsC;AAChEd,MAAAA,MAAM,EAAE,QADwD;AAEhEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFuD,KAAtC,CAA5B;;AAIA,QAAIH,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMF,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,YAAM,IAAIE,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;AACF;;AAEgB,QAAXS,WAAW,CAACD,OAAD,EAAUN,IAAV,EAAgB;AAC/B,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,WAAUoB,OAAQ,EAAnC,EAAsC;AAChEd,MAAAA,MAAM,EAAE,KADwD;AAEhEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFuD;AAGhEQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEH,QAAAA;AAAF,OAAf;AAH0D,KAAtC,CAA5B;AAKA,UAAMN,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AA/D+B","sourcesContent":["export default class TweetService {\n  //아래에서 base url을 http 이런식으로 가져올 수도 있지만 우리는 constructor에서 baseurl을 외부로부터 가져올 것임\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async getTweets(username) {\n    //전체 내용을 받아올 것인지 특정한 내용만 받아올 것인지 결정해야 해서 선언\n    let query = username ? `?username=${username}` : \"\"; //username이 전달되면 username이라는 쿼리를 만들고 전달되지 않으면 빈 문자열\n    //fetch를 사용해 서버에서 response를 가져옴(그래서 url을 전달해줌)\n    const response = await fetch(`${this.baseURL}/tweets${query}`, {\n      //옵션 정의\n      method: \"GET\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    //받아온 데이터를 json으로 변환\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message); //성공하지 않아서 에러 던짐\n    }\n    return data; //다 완성된 되었다면(데이터를 다 받았다면) 데이터 return\n  }\n\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/tweets/`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        //object를 json형태로 변환\n        text,\n        username: \"bomin\",\n        name: \"Bomin\",\n      }),\n    });\n    const data = await response.json();\n    if (response.status !== 201) {\n      throw new Error(data.message); //에러~\n    }\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    if (response.status !== 204) {\n      const data = await response.json();\n      throw new Error(data.message);\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ text }),\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}